from copy import copy, deepcopy
import math
import matplotlib
from matplotlib import pyplot
import numpy
import matplotlib.pyplot as plt
from matplotlib import collections as mc
ball_array = [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0x44, 0xfe, 0x0c, 0xfe, 0x0c, 0xfe, 0xa2, 0xfe, 0x70, 0xff, 0x06, 0xfe, 0xa2, 0xff, 0x9c, 0xff, 0x6a, 0x00, 0xfa, 0x00, 0xc8, 0x01, 0x2c, 0x00, 0xfa, 0x01, 0x90, 0x01, 0x5e, 0x02, 0x26, 0x02, 0x26, 0x02, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xa8, 0xfe, 0x70, 0xfe, 0x70, 0xff, 0x38, 0xfe, 0xd4, 0xff, 0x9c, 0xff, 0x38, 0x00, 0xc8, 0x00, 0x64, 0x01, 0x90, 0x01, 0x2c, 0x01, 0xc2, 0x01, 0x5e, 0x02, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0x12, 0xfe, 0x0c, 0xfe, 0x0c, 0xfe, 0xd4, 0xfe, 0xd4, 0xff, 0x6a, 0xff, 0x6a, 0x00, 0xc8, 0x00, 0xc8, 0x01, 0x90, 0x01, 0x2c, 0x01, 0xc2, 0x01, 0x90, 0x02, 0x58, 0x01, 0xf4, 0x02, 0x58, 0x02, 0x58, 0x02, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xa8, 0xfe, 0x70, 0xfe, 0x70, 0xff, 0x38, 0xfe, 0xd4, 0x00, 0x64, 0x00, 0x64, 0x01, 0x90, 0x00, 0x64, 0x01, 0x90, 0x00, 0xc8, 0x01, 0xf4, 0x01, 0xf4, 0x02, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0x44, 0xfd, 0xa8, 0xfd, 0xa8, 0xfe, 0x70, 0xfe, 0x3e, 0xfe, 0xa2, 0xfe, 0x70, 0xfe, 0xd4, 0xfe, 0xa2, 0xff, 0x38, 0xff, 0x38, 0x00, 0x96, 0x00, 0x96, 0x01, 0x2c, 0x01, 0x2c, 0x02, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xda, 0xfe, 0xd4, 0xfe, 0x70, 0xff, 0x38, 0xfe, 0xd4, 0xff, 0x9c, 0xfe, 0xd4, 0xff, 0x9c, 0xff, 0x9c, 0x00, 0xc8, 0x00, 0xc8, 0x01, 0xc2, 0x01, 0xc2, 0x02, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ]
# ball_array = [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x70, 0xfe, 0xd4, 0xfe, 0xa2, 0xff, 0x06, 0xff, 0x06, 0xff, 0x6a, 0xff, 0x38, 0xff, 0xce, 0xff, 0x9c, 0x00, 0x64, 0x00, 0x32, 0x00, 0xc8, 0x00, 0x96, 0x00, 0xfa, 0x00, 0xfa, 0x01, 0x5e, 0x01, 0x2c, 0x01, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x70, 0xfe, 0xd4, 0xfe, 0xd4, 0xff, 0x6a, 0xff, 0x6a, 0xff, 0xce, 0xff, 0x9c, 0x00, 0x64, 0x00, 0x32, 0x00, 0x96, 0x00, 0x96, 0x01, 0x2c, 0x01, 0x2c, 0x01, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x98, 0xfe, 0xd4, 0xfe, 0xa2, 0xff, 0x06, 0xff, 0x06, 0xff, 0x6a, 0xff, 0x6a, 0x00, 0x96, 0x00, 0x32, 0x00, 0xc8, 0x00, 0x96, 0x00, 0xfa, 0x00, 0xc8, 0x01, 0x2c, 0x00, 0xfa, 0x01, 0x5e, 0x01, 0x2c, 0x01, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x6a, 0xff, 0x9c, 0xff, 0x9c, 0xff, 0x9c, 0x00, 0x64, 0x00, 0x96, 0x00, 0x64, 0x00, 0xc8, 0x00, 0xc8, 0x01, 0x2c, 0x01, 0x2c, 0x01, 0x5e, 0x01, 0x5e, 0x01, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x70, 0xfe, 0xd4, 0xfe, 0xa2, 0xff, 0x06, 0xfe, 0xd4, 0xff, 0x38, 0xff, 0x06, 0xff, 0x6a, 0xff, 0x38, 0xff, 0xce, 0xff, 0x6a, 0x00, 0x96, 0x00, 0x96, 0x00, 0xfa, 0x00, 0xfa, 0x01, 0x5e, 0x01, 0x2c, 0x01, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x70, 0xfe, 0xa2, 0xfe, 0xa2, 0xfe, 0xd4, 0xfe, 0xd4, 0xff, 0x38, 0xff, 0x38, 0xff, 0x9c, 0xff, 0x6a, 0xff, 0x9c, 0xff, 0x9c, 0x00, 0x64, 0x00, 0x64, 0x00, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ]
# ball_array = [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0xfe, 0xc0, 0xff, 0x38, 0xff, 0x38, 0xff, 0x38, 0xff, 0x38, 0xff, 0x98, 0xff, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x68, 0x00, 0xc8, 0x00, 0xc8, 0x00, 0xc8, 0x00, 0xc8, 0x01, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x38, 0xff, 0x38, 0x00, 0x68, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x68, 0x00, 0xc8, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0xfe, 0xc0, 0xff, 0x38, 0xff, 0x38, 0xff, 0x98, 0xff, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x68, 0x00, 0xc8, 0x00, 0xc8, 0x00, 0xc8, 0x00, 0xc8, 0x01, 0x40, 0x02, 0x00, 0x01, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x38, 0xff, 0x38, 0xff, 0x98, 0xff, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x68, 0x00, 0xc8, 0x00, 0xc8, 0x01, 0x40, 0x02, 0x00, 0x01, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0xfe, 0xc0, 0xfe, 0x00, 0xfe, 0xc0, 0xff, 0x38, 0xff, 0x38, 0xff, 0x38, 0xff, 0x38, 0xff, 0x98, 0xff, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x68, 0x00, 0xc8, 0x00, 0xc8, 0x01, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0xfe, 0xc0, 0xfe, 0x00, 0xfe, 0xc0, 0xff, 0x38, 0xff, 0x38, 0xff, 0x98, 0xff, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x68, 0x00, 0xc8, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ]
def short_to_byte(a):
    return int.from_bytes(a, "big", signed=True)


a = [deepcopy([]) for _ in range(2)]
a = [deepcopy(a) for _ in range(15)]
a = [deepcopy(a) for _ in range(2)]
a = [deepcopy(a) for _ in range(3)]

shorts = [short_to_byte(ball_array[a*2:][:2]) for a in range(len(ball_array)//2)]

final_vals = a
# inputDirection, slap/charge, frame, a/b
# 3 2 15 2
for i, s in enumerate(shorts):
    direction_index = (i // 60) % 3
    slap_index = (i // 30) % 2
    frame_index = (i // 2) % 15
    ab_index = (i // 1) % 2
    final_vals[direction_index][slap_index][frame_index][ab_index] = s

NONE = 0
PULL_TOWARDS = 1
PUSH_AWAY = 2
print(final_vals)
exit()
bat_dir = ["NONE", "PULL", "PUSH"]

def add_randomness(random, v1, v2):
    v1 -= v2
    if (v1 < 0):
        v2 += random - (random // -v1) * -v1
    elif (0 < v1):
        v2 += random - (random // v1) * v1
    return v2

def int_to_angle(i):
    return round(i * 360 / 4096, 2)

def angle_to_xy(a) -> tuple[int, int]:
    return math.cos(math.radians(a)), math.sin(math.radians(a))

def get_slice(b, e, c = 100, length = 1):
    x = [0]
    y = [0]
    for i in range(c + 1):
        p = b + ((e - b) * i) / c
        pp = angle_to_xy(p + 90)
        x.append(pp[0] * length)
        y.append(pp[1] * length)
    return x,y

base_lines = [[(0,0), angle_to_xy(-45 + 90)], [(0,0), angle_to_xy(45 + 90)]]

transparency = "40"

colors = ['#008080' + transparency, '#ff0000' + transparency, '#00ff00' + transparency, '#ffd700' + transparency, '#ffa500' + transparency,
          '#00ffff' + transparency, '#ff7373' + transparency, '#40e0d0' + transparency, '#0000ff'+transparency, '#bada55' + transparency]

def has_charge(i):
    return 3 <= i <= 9

for l_r, l_r_scale in [("Righty", 1), ("Lefty", -1)]:
    for is_charge, charge_str in [(0, "Slap"), (1, "Charge")]:
        for input_direction in [NONE, PULL_TOWARDS, PUSH_AWAY]:
            lab = f""
            frame_data = ""
            plt.figure(figsize=(12,12), clear=True)
            for frame in range(2,11):
                if(is_charge and not has_charge(frame)):
                    continue

                print(lab)
                
                a = final_vals[input_direction]
                b = a[is_charge]
                c = b[frame]

                angle_begin = int_to_angle(c[0] * l_r_scale)
                angle_end   = int_to_angle(c[1] * l_r_scale)

                this_frame_data = f"{l_r} Frame {frame}, Push/Pull: {bat_dir[input_direction]} Charge: {charge_str}: {angle_begin}\N{DEGREE SIGN} to {angle_end}\N{DEGREE SIGN}\n"
                
                frame_data += this_frame_data
                
                segment_length = 1 + (frame %3) * 0.05

                x, y = get_slice(angle_begin, angle_end, length = segment_length)
                x_mid, y_mid = (sum(x) / len(x), sum(y) / len(y))
                plt.fill(x, y, color=colors[frame-1])
                plt.fill([x for x in map(lambda x: x * l_r_scale, [-0.2, -0.2, -0.1, -0.1])], [0.0, -0.1, -0.1, 0.0], color="black")
                plt.text(x_mid, y_mid, f"Frame {frame}", size = 8)
            
            plt.plot((0, angle_to_xy(-45+90)[0]), (0, angle_to_xy(-45+90)[1]), "black")
            plt.plot((0, angle_to_xy(45+90)[0]), (0, angle_to_xy(45+90)[1]), "black")
            
            plt.xlim(-1, 1)
            plt.ylim(-.5, 1.5)
            plt.title(f"L/R: {l_r}, Charge/Slap: {charge_str}, Direction: {bat_dir[input_direction]}")
            plt.legend([frame_data], loc='lower right')

            save_path = "graphs\\" + f"LayeredFrame {bat_dir[input_direction]} {charge_str} {l_r}.png"

            plt.savefig(save_path)
            # plt.show()

            print()
